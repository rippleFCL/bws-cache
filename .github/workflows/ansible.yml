name: Lint/Publish Ansible Collection

on:
  push:
    branches: [main]
    paths: ["ansible_collection/**"]
    tags: ["ansible-v*"]
  pull_request:
    paths: ["ansible_collection/**"]
  workflow_dispatch:

env:
  COLLECTION_PATH: ansible_collection

defaults:
  run:
    working-directory: ansible_collection

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ansible/ansible-lint@v25.8.0
        with:
          working_directory: ${{ env.COLLECTION_PATH }}

  publish_checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/ansible-v')
    steps:
      - uses: actions/checkout@v4

      - name: Parse collection version
        id: collection_version
        uses: mikefarah/yq@master
        with:
          cmd: yq '.version' '${{ env.COLLECTION_PATH }}/galaxy.yml'

      - name: Assert collection version matches tag
        run: |
          if [[ "${{ steps.collection_version.outputs.result }}" != "${GITHUB_REF#refs/tags/ansible-v}" ]]; then
            line=$(grep -no '^version:\s\d.*$' galaxy.yml | cut -d: -f1)
            echo "::error file=galaxy.yml,line=${line}::Version in galaxy.yml does not match tag"
            echo "❌ Version in galaxy.yml does not match git tag" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ Version in galaxy.yml matches git tag" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Assert changelog includes version
        run: |
          if ! grep -q "^## ${GITHUB_REF#refs/tags/ansible-v}" CHANGELOG.md; then
            echo "::error file=$(basename $PWD)/CHANGELOG.md::Changelog does not include tagged version"
            echo "❌ Changelog does not include a section for the tagged version" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ Changelog includes tagged version" >> $GITHUB_STEP_SUMMARY
          fi

  publish_galaxy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/ansible-v')
    needs:
      - lint
      - publish_checks
    steps:
      - uses: actions/checkout@v4

      - name: Build the collection
        run: |
          ansible-galaxy collection build -v --force

      - name: Publish the collection to Ansible Galaxy
        run: >
          [[ "${{ secrets.GALAXY_API_KEY != '' }}" ]] || { echo
          "GALAXY_API_KEY secret is required to publish on galaxy" ; exit 1; }

          TARBALL=$(ls -1 ./*.tar.gz)

          ansible-galaxy collection publish "${TARBALL}" --api-key "${{ secrets.GALAXY_API_KEY }}"
